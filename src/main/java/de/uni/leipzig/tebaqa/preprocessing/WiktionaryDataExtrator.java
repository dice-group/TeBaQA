package de.uni.leipzig.tebaqa.preprocessing;

import de.tudarmstadt.ukp.jwktl.api.IWiktionaryEdition;
import de.tudarmstadt.ukp.jwktl.api.IWiktionaryEntry;
import de.tudarmstadt.ukp.jwktl.api.IWiktionaryPage;
import de.tudarmstadt.ukp.jwktl.api.IWiktionaryRelation;
import de.tudarmstadt.ukp.jwktl.api.RelationType;
import de.tudarmstadt.ukp.jwktl.api.util.IWiktionaryIterator;
import joptsimple.internal.Strings;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

public class WiktionaryDataExtrator {
    public static void main(String[] args) throws IOException {
        IWiktionaryEdition wiktionaryInstance = WiktionaryProvider.getWiktionaryInstance();
        writeWiktionaryHypernymsToPropertiesFile(RelationType.HYPERNYM, "./src/main/resources/hypernyms.Properties",
                wiktionaryInstance, "Autogenerated list of hypernyms from enwiktionary-20171201-pages-articles-multistream.xml.bz2");
        writeWiktionaryHypernymsToPropertiesFile(RelationType.HYPONYM, "./src/main/resources/hyponyms.Properties",
                wiktionaryInstance, "Autogenerated list of hyponyms from enwiktionary-20171201-pages-articles-multistream.xml.bz2");

    }

    private static void writeWiktionaryHypernymsToPropertiesFile(RelationType relationtype, String path, IWiktionaryEdition wiktionaryInstance, String comment) throws IOException {
        System.out.println("Cleaning old properties file...");
        File file = new File(path);
        Files.deleteIfExists(file.toPath());
        file.createNewFile();

        Properties properties = new Properties();
        IWiktionaryIterator<IWiktionaryPage> allPages = wiktionaryInstance.getAllPages();
        while (allPages.hasNext()) {
            List<String> l = new ArrayList<>();
            IWiktionaryPage page = allPages.next();
            for (IWiktionaryEntry entry : page.getEntries()) {
                for (IWiktionaryRelation relation : entry.getRelations(relationtype)) {
                    String target = relation.getTarget();
                    if (target.contains("<")) {
                        target = target.split("<")[0];
                    }
                    if (target.contains("]")) {
                        String[] split = target.split("]");
                        target = split[split.length - 1];
                    }
                    if (!target.contains("Thesaurus:") && !target.contains("- ") && !target.equalsIgnoreCase("&nbsp") && !target.contains("[") && !target.contains("]")) {
                        l.add(target.replace("&nbsp", " ").trim());
                    }
                }
            }
            if (!l.isEmpty()) {
                properties.put(page.getTitle(), Strings.join(l, ";"));
            }
        }

        FileOutputStream fileOutputStream = new FileOutputStream(path);
        properties.store(fileOutputStream, comment);
    }
}
